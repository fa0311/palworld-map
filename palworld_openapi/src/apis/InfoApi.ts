/* tslint:disable */
/* eslint-disable */
/**
 * PalWorld OpenAPI
 * PalWorld OpenAPI(Swagger) specification
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: yuki@yuki0311.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InfoResponse,
  MetricsResponse,
  PlayersResponse,
  SettingsResponse,
} from '../models/index';
import {
    InfoResponseFromJSON,
    InfoResponseToJSON,
    MetricsResponseFromJSON,
    MetricsResponseToJSON,
    PlayersResponseFromJSON,
    PlayersResponseToJSON,
    SettingsResponseFromJSON,
    SettingsResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class InfoApi extends runtime.BaseAPI {

    /**
     * Get server information
     */
    async getInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/api/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     * Get server information
     */
    async getInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.getInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the server metrics
     */
    async getMetricsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/api/metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get the server metrics
     */
    async getMetrics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsResponse> {
        const response = await this.getMetricsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all players
     */
    async getPlayersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/api/players`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayersResponseFromJSON(jsonValue));
    }

    /**
     * Get all players
     */
    async getPlayers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayersResponse> {
        const response = await this.getPlayersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the server settings
     */
    async getSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/api/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsResponseFromJSON(jsonValue));
    }

    /**
     * Get the server settings
     */
    async getSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingsResponse> {
        const response = await this.getSettingsRaw(initOverrides);
        return await response.value();
    }

}
